security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\ApiTokenAuthenticator
            stateless: true

    access_control:
        # Public routes
        - { path: ^/api/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        
        # Protected routes
        - { path: ^/api/classes, roles: ROLE_PLAYER }
        - { path: ^/api/races, roles: ROLE_PLAYER }
        - { path: ^/api/create-character, roles: ROLE_PLAYER }
        - { path: ^/api/user-characters/{id}, roles: ROLE_PLAYER }
        - { path: ^/api/, roles: ROLE_USER }

    role_hierarchy:
        ROLE_PLAYER: ROLE_USER
        ROLE_ADMIN: ROLE_PLAYER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
