{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041C\\u0435\\u043B\\u0430\\u043D\\u0438\\u044F\\\\Documents\\\\GitHub\\\\online-web-mmo-rpg\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  isAuthenticated: false,\n  user: null,\n  login: () => {},\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if token and user exist on mount\n    const token = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    setIsAuthenticated(!!token);\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const login = (token, userData) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n    setUser(userData);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Cix+uXOU60jwVTrRl9ss+REDA3M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","isAuthenticated","user","login","logout","AuthProvider","children","_s","setIsAuthenticated","setUser","token","localStorage","getItem","storedUser","JSON","parse","userData","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Мелания/Documents/GitHub/online-web-mmo-rpg/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nexport interface AuthContextType {\n  isAuthenticated: boolean;\n  user: any | null;\n  login: (token: string, userData: any) => void;\n  logout: () => void;\n}\n\nexport const AuthContext = createContext<AuthContextType>({ \n  isAuthenticated: false,\n  user: null,\n  login: () => {},\n  logout: () => {}\n});\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [user, setUser] = useState<any | null>(null);\n\n  useEffect(() => {\n    // Check if token and user exist on mount\n    const token = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    setIsAuthenticated(!!token);\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  const login = (token: string, userData: any) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n    setUser(userData);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAkB;EACxDO,eAAe,EAAE,KAAK;EACtBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACN,eAAe,EAAEO,kBAAkB,CAAC,GAAGZ,QAAQ,CAAU,KAAK,CAAC;EACtE,MAAM,CAACM,IAAI,EAAEO,OAAO,CAAC,GAAGb,QAAQ,CAAa,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/CJ,kBAAkB,CAAC,CAAC,CAACE,KAAK,CAAC;IAC3B,IAAIG,UAAU,EAAE;MACdJ,OAAO,CAACK,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMV,KAAK,GAAGA,CAACO,KAAa,EAAEM,QAAa,KAAK;IAC9CL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;IACpCC,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACI,SAAS,CAACF,QAAQ,CAAC,CAAC;IACtDR,kBAAkB,CAAC,IAAI,CAAC;IACxBC,OAAO,CAACO,QAAQ,CAAC;EACnB,CAAC;EAED,MAAMZ,MAAM,GAAGA,CAAA,KAAM;IACnBO,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BX,kBAAkB,CAAC,KAAK,CAAC;IACzBC,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEV,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,eAAe;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAE;IAAAE,QAAA,EACnEA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,EAAA,CAjCWF,YAAqD;AAAAqB,EAAA,GAArDrB,YAAqD;AAmClE,OAAO,MAAMsB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGlC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}