{"ast":null,"code":"const API_URL = 'http://localhost:8000/api';\nexport const characterService = {\n  async getClasses() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n    const response = await fetch(`${API_URL}/classes`, {\n      headers\n    });\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to load character classes');\n    }\n    return data.data;\n  },\n  async getRaces() {\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n    const response = await fetch(`${API_URL}/races`, {\n      headers\n    });\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to load races');\n    }\n    return data.data;\n  },\n  async createCharacter(formData) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('Not authenticated. Please log in.');\n    }\n    const response = await fetch(`${API_URL}/create-character`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(formData)\n    });\n    const data = await response.json();\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to create character');\n    }\n  }\n};","map":{"version":3,"names":["API_URL","characterService","getClasses","token","localStorage","getItem","headers","response","fetch","data","json","success","Error","error","getRaces","createCharacter","formData","method","body","JSON","stringify"],"sources":["C:/Users/Мелания/Documents/GitHub/online-web-mmo-rpg/frontend/src/services/characterService.ts"],"sourcesContent":["import { CharacterClass, CharacterFormData, CharacterRace } from '../types/character';\n\nconst API_URL = 'http://localhost:8000/api';\n\nexport const characterService = {\n    async getClasses(): Promise<CharacterClass[]> {\n        const token = localStorage.getItem('token');\n        const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        };\n\n        const response = await fetch(`${API_URL}/classes`, { headers });\n        const data = await response.json();\n        \n        if (!data.success) {\n            throw new Error(data.error || 'Failed to load character classes');\n        }\n        \n        return data.data;\n    },\n\n    async getRaces(): Promise<CharacterRace[]> {\n        const token = localStorage.getItem('token');\n        const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        };\n\n        const response = await fetch(`${API_URL}/races`, { headers });\n        const data = await response.json();\n        \n        if (!data.success) {\n            throw new Error(data.error || 'Failed to load races');\n        }\n        \n        return data.data;\n    },\n\n    async createCharacter(formData: CharacterFormData): Promise<void> {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            throw new Error('Not authenticated. Please log in.');\n        }\n\n        const response = await fetch(`${API_URL}/create-character`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(formData)\n        });\n\n        const data = await response.json();\n        \n        if (!data.success) {\n            throw new Error(data.error || 'Failed to create character');\n        }\n    }\n};\n"],"mappings":"AAEA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,gBAAgB,GAAG;EAC5B,MAAMC,UAAUA,CAAA,EAA8B;IAC1C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAA+B,GAAG;MACpC,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,UAAU,EAAE;MAAEM;IAAQ,CAAC,CAAC;IAC/D,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;MACf,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,kCAAkC,CAAC;IACrE;IAEA,OAAOJ,IAAI,CAACA,IAAI;EACpB,CAAC;EAED,MAAMK,QAAQA,CAAA,EAA6B;IACvC,MAAMX,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAA+B,GAAG;MACpC,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,QAAQ,EAAE;MAAEM;IAAQ,CAAC,CAAC;IAC7D,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;MACf,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,sBAAsB,CAAC;IACzD;IAEA,OAAOJ,IAAI,CAACA,IAAI;EACpB,CAAC;EAED,MAAMM,eAAeA,CAACC,QAA2B,EAAiB;IAC9D,MAAMb,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACR,MAAM,IAAIS,KAAK,CAAC,mCAAmC,CAAC;IACxD;IAEA,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,mBAAmB,EAAE;MACxDiB,MAAM,EAAE,MAAM;MACdX,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUH,KAAK;MACpC,CAAC;MACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;IACjC,CAAC,CAAC;IAEF,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;MACf,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,4BAA4B,CAAC;IAC/D;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}